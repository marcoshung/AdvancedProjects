package sudoku;import java.util.*;public class Grid {	private int[][]						values;		//	// DON'T CHANGE THIS.	//	// Constructs a Grid instance from a string[] as provided by TestGridSupplier.	// See TestGridSupplier for examples of input.	// Dots in input strings represent 0s in values[][].	//	public Grid(String[] rows)	{		values = new int[9][9];		for (int j=0; j<9; j++)		{			String row = rows[j];			char[] charray = row.toCharArray();			for (int i=0; i<9; i++)			{				char ch = charray[i];				if (ch != '.')					values[j][i] = ch - '0';			}		}	}			//	// DON'T CHANGE THIS.	//	public String toString()	{		String s = "";		for (int j=0; j<9; j++)		{			for (int i=0; i<9; i++)			{				int n = values[j][i];				if (n == 0)					s += '.';				else					s += (char)('0' + n);			}			s += "\n";		}		return s;	}	//	// DON'T CHANGE THIS.	// Copy ctor. Duplicates its source. You’ll call this 9 times in next9Grids.	//	Grid(Grid src)	{		values = new int[9][9];		for (int j=0; j<9; j++)			for (int i=0; i<9; i++)				values[j][i] = src.values[j][i];	}			// Finds an empty member of values[][]. Returns an array list of 9 grids that look like the current grid,	// except the empty member contains 1, 2, 3 .... 9. Returns null if the current grid is full. Don’t change	// “this” grid. Build 9 new grids.	// 	//	// Example: if this grid = 1........	//                         .........	//                         .........	//                         .........	//                         .........	//                         .........	//                         .........	//                         .........	//                         .........	//	// Then the returned array list would contain:	//	// 11.......          12.......          13.......          14.......    and so on     19.......	// .........          .........          .........          .........                  .........	// .........          .........          .........          .........                  .........	// .........          .........          .........          .........                  .........	// .........          .........          .........          .........                  .........	// .........          .........          .........          .........                  .........	// .........          .........          .........          .........                  .........	// .........          .........          .........          .........                  .........	// .........          .........          .........          .........                  .........	//	public ArrayList<Grid> next9Grids(){					if(isFull()) {			return null;		}		int xOfNextEmptyCell = -1;		int yOfNextEmptyCell = -1;				// Find x,y of an empty cell.		for (int i = 0; i < 9; i++) {			for(int j = 0; j < 9; j ++) {				if (values[i][j] == 0) {					xOfNextEmptyCell = i;					yOfNextEmptyCell = j;					i = 9;					j = 9;									}			}		}		// Construct array list to contain 9 new grids.		ArrayList<Grid> grids = new ArrayList<Grid>();		// Create 9 new grids as described in the comments above. Add them to grids.		int valueToAdd = 1;		for (int i = 0; i < 9; i++) {			Grid grid = new Grid(this);			grid.values[xOfNextEmptyCell][yOfNextEmptyCell] = valueToAdd;			grids.add(grid);			valueToAdd++;		}				return grids;	}					// Returns true if this grid is legal. A grid is legal if no row, column, or	// 3x3 block contains a repeated 1, 2, 3, 4, 5, 6, 7, 8, or 9.	//	public boolean isLegal(){		HashSet<Integer> set = new HashSet<Integer>();		// Check every row. If you find an illegal row, return false.		for(int i = 0; i < this.values.length; i++) {			for(int j = 0; j <this.values[i].length; j++){				if(values[i][j] != 0 && set.contains(values[i][j])) {					return false;				}else if(values[i][j] != 0) {					set.add(values[i][j]);				}			}			set.clear();		}				// Check every column. If you find an illegal column, return false.		for(int i = 0; i <this.values.length; i++) {			for(int j = 0; j < this.values[i].length; j++) {				if(values[j][i] != 0 && set.contains(this.values[j][i])) {					return false;				}else if(values[j][i] != 0) {					set.add(values[j][i]);				}			}			set.clear();		}		// Check every block. If you find an illegal block, return false.		for(int i = 0; i < values.length; i+=3) {			for(int j = 0; j <values[i].length; j+=3) {				for(int k = i; k < i + 3; k++) {					for(int l = j; l < j + 3; l++) {						if(values[k][l] != 0 && set.contains(values[k][l])) {							return false;						}else if(values[k][l] != 0) {							set.add(values[k][l]);						}					}				}				set.clear();			}		}		// All rows/cols/blocks are legal.		return true;	}		// Returns true if every cell member of values[][] is a digit from 1-9.		public boolean isFull(){		for(int i = 0; i < this.values.length; i++) {			for(int j = 0; j < this.values[i].length; j++) {				if(this.values[i][j] == 0) {					return false;				}			} 		}		return true;	}			// Returns true if x is a Grid and, for every (i,j), 	// x.values[i][j] == this.values[i][j].	//	public boolean equals(Object x){		if(!(x instanceof Grid)) {			return false;		}		Grid xGrid = (Grid) x;				for(int i = 0; i < values.length; i++) {			for(int j = 0; j < values[i].length;j++) {				if(this.values[i][j] != xGrid.values[i][j]) {					return false;				}			}		}		return true;	}		//returns the grid values	public int[][] getValues(){		return this.values;	}}